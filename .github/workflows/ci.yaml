name: 'CI'

on:
    pull_request:
    push:

jobs:
    coding-standards:
        name: 'Coding Standards - PHP ${{ matrix.php-version }}'
        runs-on: 'ubuntu-latest'
        # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
        if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

        strategy:
            fail-fast: false
            matrix:
                php-version:
                    - '8.0'

        steps:
            -   name: 'Checkout code'
                uses: actions/checkout@v2

            -   name: 'Setup PHP'
                uses: shivammathur/setup-php@v2
                with:
                    coverage: 'none'
                    php-version: '${{ matrix.php-version }}'
                    tools: php-cs-fixer
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   name: 'Display PHP versions'
                run: |
                    php -r 'foreach (get_loaded_extensions() as $extension) echo $extension . " " . phpversion($extension) . PHP_EOL;'
                    php -i

            -   name: 'Install Composer dependencies'
                uses: ramsey/composer-install@v1
                with:
                    composer-options: '--prefer-dist'

            -   name: 'Display dependencies versions'
                run: composer show

            -   name: "PHP Coding Standards Fixer"
                run: php-cs-fixer fix --dry-run --diff --using-cache=no

            -   name: "PHP Code Style Sniffer"
                if: always()
                run: vendor/bin/phpcs --standard=php_cs.xml app/src src tests

            -   name: "Psalm"
                if: always()
                run: vendor/bin/psalm

    unit-tests:
        name: 'Unit Tests - PHP ${{ matrix.php-version }}, Symfony ${{ matrix.symfony-version }}'
        runs-on: ubuntu-latest
        # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
        if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

        strategy:
            fail-fast: false
            matrix:
                include:
                    # Lowest possible configuration
#                    -   php-version: '8.0'
#                        composer-allow-dev: true
#                        dependency-versions: 'lowest'
#                        symfony-version: '5.4.x-dev as 5.4.0'

                    # Test against upcoming Symfony 5.4
                    -   php-version: '8.0'
                        composer-allow-dev: true
                        symfony-version: '5.4.x-dev as 5.4.0'

                    # Test against upcoming Symfony 6.0
                    -   php-version: '8.0'
                        composer-allow-dev: true
                        symfony-version: '6.0.x-dev as 5.4.0'  # Convincing Symfony dependants that "everything is fine"

                    # Test against latest Symfony 5 + PHP 8.1
                    -   php-version: '8.1'
                        composer-allow-dev: true
                        symfony-version: '^5.0'

        steps:
            -   name: 'Checkout code'
                uses: actions/checkout@v2

            -   name: 'Setup PHP'
                uses: shivammathur/setup-php@v2
                with:
                    coverage: 'none'
                    php-version: '${{ matrix.php-version }}'
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   name: 'Display PHP versions'
                run: |
                    php -r 'foreach (get_loaded_extensions() as $extension) echo $extension . " " . phpversion($extension) . PHP_EOL;'
                    php -i

            -   name: "Composer allow dev dependencies"
                if: ${{ matrix.composer-allow-dev }}
                run: composer config minimum-stability dev && composer config prefer-stable true

            -   name: "Require Symfony version"
                if: ${{ matrix.symfony-version != 'lowest' }}
                run: composer require "symfony/symfony:${{ matrix.symfony-version }}" --no-update

            -   name: "Require extra Composer dependencies"
                if: ${{ matrix.composer-require }}
                run: composer require ${{ matrix.composer-require }} --no-update

            -   name: 'Install Composer dependencies'
                uses: ramsey/composer-install@v1
                with:
                    composer-options: '--prefer-dist'
                    dependency-versions: '${{ matrix.dependency-versions }}'

            -   name: 'Display dependencies versions'
                run: composer show

            -   name: 'Run tests'
                run: vendor/bin/phpunit

    integration-tests:
        name: 'Integration Tests - PHP ${{ matrix.php-version }}, Symfony ${{ matrix.symfony-version }}, Config ${{ matrix.app-config }}'
        runs-on: ubuntu-latest
        # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
        if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

        strategy:
            fail-fast: false
            matrix:
                include:
                    # DEFAULT configuration (old security system)

                    # Minimum PHP version
#                    -   php-version: '8.0'
#                        composer-allow-dev: true
#                        symfony-version: '5.4.x-dev as 5.4.0'
#                        app-config: 'authenticators'

                    # Test against upcoming Symfony 5.4
                    -   php-version: '8.0'
                        composer-allow-dev: true
                        symfony-version: '5.4.x-dev as 5.4.0'
                        app-config: 'authenticators'

                    # Test against upcoming Symfony 6.0
                    -   php-version: '8.0'
                        composer-allow-dev: true
                        symfony-version: '6.0.x-dev as 5.4.0'  # Convincing Symfony dependants that "everything is fine"
                        app-config: 'authenticators'

                    # PHP 8.1
                    -   php-version: '8.1'
                        composer-allow-dev: true
                        symfony-version: '~5.3.0'
                        app-config: 'authenticators'
        steps:
            -   name: 'Checkout code'
                uses: actions/checkout@v2

            -   name: 'Setup PHP'
                uses: shivammathur/setup-php@v2
                with:
                    coverage: 'none'
                    php-version: '${{ matrix.php-version }}'
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   name: 'Display PHP versions'
                run: |
                    php -r 'foreach (get_loaded_extensions() as $extension) echo $extension . " " . phpversion($extension) . PHP_EOL;'
                    php -i

            -   name: "Composer allow dev dependencies"
                if: ${{ matrix.composer-allow-dev }}
                run: composer config minimum-stability dev --working-dir=app && composer config prefer-stable true --working-dir=app

            -   name: "Require Symfony version"
                if: ${{ matrix.symfony-version != 'lowest' }}
                run: composer require "symfony/symfony:${{ matrix.symfony-version }}" --no-update --working-dir=app

            -   name: "Require extra Composer dependencies"
                if: ${{ matrix.composer-require }}
                run: composer require ${{ matrix.composer-require }} --no-update --working-dir=app

            -   name: 'Install Composer dependencies'
                uses: ramsey/composer-install@v1
                with:
                    composer-options: '--prefer-dist --working-dir=app'

            -   name: 'Display dependencies versions'
                run: composer show --working-dir=app

            -   name: 'Run tests'
                run: app/vendor/bin/phpunit -c app
                env:
                    TEST_CONFIG: '${{ matrix.app-config }}'

    code-coverage:
        name: 'Code Coverage - PHP ${{ matrix.php-version }}'
        runs-on: 'ubuntu-latest'
        # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
        if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

        strategy:
            fail-fast: false
            matrix:
                php-version:
                    - '8.0'

        steps:
            -   name: 'Checkout code'
                uses: actions/checkout@v2

            -   name: 'Setup PHP'
                uses: shivammathur/setup-php@v2
                with:
                    coverage: 'none'
                    php-version: '${{ matrix.php-version }}'
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   name: 'Display PHP versions'
                run: |
                    php -r 'foreach (get_loaded_extensions() as $extension) echo $extension . " " . phpversion($extension) . PHP_EOL;'
                    php -i

            -   name: 'Install Composer dependencies'
                uses: ramsey/composer-install@v1
                with:
                    composer-options: '--prefer-dist'

            -   name: 'Display dependencies versions'
                run: composer show

            -   name: 'Run tests with coverage'
                run: phpdbg -qrr vendor/bin/phpunit --coverage-clover coverage/clover.xml

            -   name: 'Send Coverage'
                continue-on-error: true
                timeout-minutes: 1
                run: |
                    wget https://scrutinizer-ci.com/ocular.phar
                    php ocular.phar code-coverage:upload --format=php-clover coverage/clover.xml
